.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LUA-OOCAIRO-FONTOPT 3"
.TH LUA-OOCAIRO-FONTOPT 3 "2008-11-07" "1.2" "Lua OO Cairo binding"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
lua-oocairo-fontopt \- options controlling text rendering
.SH "Introduction"
.IX Header "Introduction"
A font options object contains options that tell Cairo how to render
text on surfaces.  They can be created with the \f(CW\*(C`font_options_create\*(C'\fR
function in the main oocairo module (see \fIlua\-oocairo\fR\|(3)), and
retrieved from scaled fonts or context objects with \f(CW\*(C`get_font_options\*(C'\fR
methods.
.PP
Font options objects can be compared with the \f(CW\*(C`==\*(C'\fR operator.  Two different
objects with the same options set will be considered equal.
.SH "Methods"
.IX Header "Methods"
The following methods are available on font options objects:
.IP "opt:copy ()" 4
.IX Item "opt:copy ()"
Returns a new font options object, with identical options to \fIopt\fR.
The two objects will be completely independent, so you can set them to
have different options.
.IP "opt:get_antialias ()" 4
.IX Item "opt:get_antialias ()"
Get the current antialiasing mode, which will be one of the strings accepted
by the \f(CW\*(C`opt:set_antialias()\*(C'\fR method.
.IP "opt:get_hint_metrics ()" 4
.IX Item "opt:get_hint_metrics ()"
Returns the current hint metrics option, which will be one of the same strings
accepted by the \f(CW\*(C`opt:set_hint_metrics()\*(C'\fR method.
.IP "opt:get_hint_style ()" 4
.IX Item "opt:get_hint_style ()"
Get the kind of font hinting done when rendering text.  Returns one of
the strings accepted by the \f(CW\*(C`opt:set_hint_style()\*(C'\fR method.
.IP "opt:get_subpixel_order ()" 4
.IX Item "opt:get_subpixel_order ()"
Returns the current ordering of colour components in pixels used for
subpixel rendering, which will be one of the same strings
accepted by the \f(CW\*(C`opt:set_subpixel_order()\*(C'\fR method.
.IP "opt:hash ()" 4
.IX Item "opt:hash ()"
Return a number which can be used as a hash key identifying the particular
options in \fIopt\fR.  That is, if you wanted to cache fonts according to
the options set on them, you could store them in a table with this hash
value as the key.  Two font options objects with the same options will
have the same hash value.
.IP "opt:merge (srcopt)" 4
.IX Item "opt:merge (srcopt)"
Add any options which are set to a non-default value in \fIsrcopt\fR to \fIopt\fR
if that still has the default value from them.  The options in \fIsrcopt\fR
will be unchanged.  Nothing is returned.
.IP "opt:set_antialias (antialiastype)" 4
.IX Item "opt:set_antialias (antialiastype)"
Set the antialiasing mode used for drawing.  The argument must be a string
or boolean value accepted by the \f(CW\*(C`set_antialias\*(C'\fR method on context objects
(see \fIlua\-oocairo\-context\fR\|(3)).
.IP "opt:set_hint_metrics (hintmetrics)" 4
.IX Item "opt:set_hint_metrics (hintmetrics)"
Set the kind of hinting to be applied to the metrics, as opposed to outlines,
of the glyphs in a font.  The \fIhintmetrics\fR value must be one of the
following strings:
.RS 4
.IP "default" 4
.IX Item "default"
.PD 0
.IP "off" 4
.IX Item "off"
.IP "on" 4
.IX Item "on"
.RE
.RS 4
.RE
.IP "opt:set_hint_style (hintstyle)" 4
.IX Item "opt:set_hint_style (hintstyle)"
.PD
Set the kind of font hinting done when rendering text.  The \fIhintstyle\fR
value must be one of the following strings:
.RS 4
.IP "default" 4
.IX Item "default"
.PD 0
.IP "none" 4
.IX Item "none"
.IP "slight" 4
.IX Item "slight"
.IP "medium" 4
.IX Item "medium"
.IP "full" 4
.IX Item "full"
.RE
.RS 4
.RE
.IP "opt:set_subpixel_order (order)" 4
.IX Item "opt:set_subpixel_order (order)"
.PD
Used to inform Cairo of the arrangement of colour components in the pixels
of a display device like a monitor.  Only applies if subpixel antialiasing
is used.  The \fIorder\fR value must be one of the following strings:
.RS 4
.IP "default" 4
.IX Item "default"
.PD 0
.IP "rgb" 4
.IX Item "rgb"
.IP "bgr" 4
.IX Item "bgr"
.IP "vrgb" 4
.IX Item "vrgb"
.IP "vbgr" 4
.IX Item "vbgr"
.RE
.RS 4
.PD
.Sp
The last two options refer to vertical arrangements of colours.
.RE
