.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LUA-OOCAIRO-SCALEDFONT 3"
.TH LUA-OOCAIRO-SCALEDFONT 3 "2008-11-07" "1.2" "Lua OO Cairo binding"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
lua-oocairo-scaledfont \- Scaled font face object
.SH "Introduction"
.IX Header "Introduction"
Scaled font objects represent Cairo font faces which have been scaled to
a particular point size.  They can be created from a font face object with
the \f(CW\*(C`scaled_font_create\*(C'\fR function in the main module table (see
\&\fIlua\-oocairo\fR\|(3)), or the \f(CW\*(C`get_scaled_font\*(C'\fR method on context objects
(see \fIlua\-oocairo\-context\fR\|(3)).
.PP
Scaled font objects can be compared with the \f(CW\*(C`==\*(C'\fR operator.  This will compare
the identity of the objects, so different Lua objects which refer to the
same \f(CW\*(C`cairo_font_face_t\*(C'\fR will compare as equal.
.SH "Methods"
.IX Header "Methods"
Scaled font objects provide the following methods.
.IP "font:extents ()" 4
.IX Item "font:extents ()"
Returns a table containing metrics information about the font.  The return
value is in the same format as that of the \f(CW\*(C`font_extents\*(C'\fR method on context
objects (see \fIlua\-oocairo\-context\fR\|(3)).
.IP "font:get_ctm ()" 4
.IX Item "font:get_ctm ()"
Returns the coordinate transformation matrix (\s-1CTM\s0) associated with the
font.  This maps user coordinates into device coordinates on the surface
with which the font is used.
See \fIlua\-oocairo\-matrix\fR\|(3) for details of the return value type.
.IP "font:get_font_face ()" 4
.IX Item "font:get_font_face ()"
Returns an object representing the unscaled font face used to create this
font.  See \fIlua\-oocairo\-fontface\fR\|(3) for details of its methods.
.IP "font:get_font_matrix ()" 4
.IX Item "font:get_font_matrix ()"
Returns the matrix representing the scaling of the font into user coordinates.
See \fIlua\-oocairo\-matrix\fR\|(3) for details of the return value type.
.IP "cr:get_font_options ()" 4
.IX Item "cr:get_font_options ()"
Returns a font options object (see \fIlua\-oocairo\-fontopt\fR\|(3)) containing
the rendering options that were supplied when creating this font.
.IP "font:get_scale_matrix ()" 4
.IX Item "font:get_scale_matrix ()"
Returns a matrix table representing the scaling of the font to the coordinate
space of the surface it is used on.  This is the matrix obtained by
multiplying the font matrix by the surface \s-1CTM\s0.  See \fIlua\-oocairo\-matrix\fR\|(3)
for details of the return value type.
Only available with Cairo\ 1.8 or better.
.IP "font:get_type ()" 4
.IX Item "font:get_type ()"
Returns a string indicating which back-end library provides the font face
information.  The return value will be one of the same strings returned
by the \f(CW\*(C`get_type\*(C'\fR method on a font face object
(see \fIlua\-oocairo\-fontface\fR\|(3)).
.IP "font:glyph_extents (glyphs)" 4
.IX Item "font:glyph_extents (glyphs)"
Same as \f(CW\*(C`font:text_extents()\*(C'\fR, but instead of a string, the \fIglyphs\fR value
should be table in the format accepted by the \f(CW\*(C`show_glyphs()\*(C'\fR method
on context objects (see \fIlua\-oocairo\-context\fR\|(3)).
.IP "font:text_extents (text)" 4
.IX Item "font:text_extents (text)"
Returns a table containing measurements of the given \s-1UTF\-8\s0 text as it would
be rendered in this font.  The return value is in the same format as that
of the \f(CW\*(C`text_extents\*(C'\fR method on context objects (see
\&\fIlua\-oocairo\-context\fR\|(3)).
.IP "font:text_to_glyphs (x, y, text)" 4
.IX Item "font:text_to_glyphs (x, y, text)"
Given some \s-1UTF\-8\s0 text in the string \fItext\fR, and starting coordinates of
\&\fIx\fR and \fIy\fR, this works out which glyphs need to be drawn to represent
the text, and which glyphs correspond to the bytes in \fItext\fR.  The method
returns two tables, the first an array of glyphs suitable for supplying to
methods like \f(CW\*(C`show_glyphs\*(C'\fR and \f(CW\*(C`glyph_extents\*(C'\fR, and the second is a table
of text clusters suitable for supplying to the \f(CW\*(C`show_text_glyphs\*(C'\fR method
on a context object.
.Sp
Only available with Cairo\ 1.8 or better.
